// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserDto user dto
//
// swagger:model UserDto
type UserDto struct {

	// accepted terms
	AcceptedTerms bool `json:"acceptedTerms,omitempty"`

	// additional details general
	AdditionalDetailsGeneral string `json:"additionalDetailsGeneral,omitempty"`

	// additional details lease
	AdditionalDetailsLease string `json:"additionalDetailsLease,omitempty"`

	// bio
	Bio string `json:"bio,omitempty"`

	// can credit check
	CanCreditCheck bool `json:"creditCheck,omitempty"`

	// created on
	CreatedOn string `json:"createdOn,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// full name
	FullName string `json:"fullName,omitempty"`

	// has pets
	HasPets bool `json:"pets,omitempty"`

	// has previous eviction
	HasPreviousEviction bool `json:"evicted,omitempty"`

	// has previous lawsuit
	HasPreviousLawsuit bool `json:"lawsuit,omitempty"`

	// has roommates
	HasRoommates bool `json:"roommates,omitempty"`

	// has security deposit
	HasSecurityDeposit bool `json:"securityDeposit,omitempty"`

	// Id
	ID string `json:"id,omitempty"`

	// is smoker
	IsSmoker bool `json:"smoker,omitempty"`

	// last updated
	LastUpdated string `json:"lastUpdated,omitempty"`

	// login Id
	LoginID string `json:"loginId,omitempty"`

	// move in date
	MoveInDate string `json:"moveInDate,omitempty"`

	// move out date
	MoveOutDate string `json:"moveOutDate,omitempty"`

	// moving reason
	MovingReason string `json:"movingReason,omitempty"`

	// nickname
	Nickname string `json:"nickname,omitempty"`

	// phone number
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// send notifications
	SendNotifications bool `json:"sendNotifications,omitempty"`

	// walkthrough complete
	WalkthroughComplete bool `json:"walkthroughComplete,omitempty"`

	// user status type
	UserStatusType UserStatusType `json:"userStatusType,omitempty"`

	// user type
	UserType UserType `json:"userType,omitempty"`
}

// Validate validates this user dto
func (m *UserDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserStatusType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserDto) validateUserStatusType(formats strfmt.Registry) error {
	if swag.IsZero(m.UserStatusType) { // not required
		return nil
	}

	if err := m.UserStatusType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("userStatusType")
		}
		return err
	}

	return nil
}

func (m *UserDto) validateUserType(formats strfmt.Registry) error {
	if swag.IsZero(m.UserType) { // not required
		return nil
	}

	if err := m.UserType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("userType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this user dto based on the context it is used
func (m *UserDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserStatusType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserDto) contextValidateUserStatusType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UserStatusType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("userStatusType")
		}
		return err
	}

	return nil
}

func (m *UserDto) contextValidateUserType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UserType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("userType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserDto) UnmarshalBinary(b []byte) error {
	var res UserDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
