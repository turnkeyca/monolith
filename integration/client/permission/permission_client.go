// Code generated by go-swagger; DO NOT EDIT.

package permission

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new permission API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for permission API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AcceptPermission(params *AcceptPermissionParams, opts ...ClientOption) (*AcceptPermissionNoContent, error)

	CreatePermission(params *CreatePermissionParams, opts ...ClientOption) (*CreatePermissionNoContent, error)

	DeletePermission(params *DeletePermissionParams, opts ...ClientOption) (*DeletePermissionNoContent, error)

	GetPermission(params *GetPermissionParams, opts ...ClientOption) (*GetPermissionOK, error)

	GetPermissionsByUserID(params *GetPermissionsByUserIDParams, opts ...ClientOption) (*GetPermissionsByUserIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AcceptPermission accept a permission
*/
func (a *Client) AcceptPermission(params *AcceptPermissionParams, opts ...ClientOption) (*AcceptPermissionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptPermission",
		Method:             "POST",
		PathPattern:        "/v1/permission/{id}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AcceptPermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptPermissionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptPermission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePermission create a new permission
*/
func (a *Client) CreatePermission(params *CreatePermissionParams, opts ...ClientOption) (*CreatePermissionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPermission",
		Method:             "POST",
		PathPattern:        "/v1/permission",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePermissionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPermission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePermission delete a permission
*/
func (a *Client) DeletePermission(params *DeletePermissionParams, opts ...ClientOption) (*DeletePermissionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePermission",
		Method:             "DELETE",
		PathPattern:        "/v1/permission/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePermissionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePermission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPermission return a permission
*/
func (a *Client) GetPermission(params *GetPermissionParams, opts ...ClientOption) (*GetPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPermission",
		Method:             "GET",
		PathPattern:        "/v1/permission/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPermission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPermissionsByUserID return all permissions for a user
*/
func (a *Client) GetPermissionsByUserID(params *GetPermissionsByUserIDParams, opts ...ClientOption) (*GetPermissionsByUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsByUserIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPermissionsByUserId",
		Method:             "GET",
		PathPattern:        "/v1/permission",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPermissionsByUserIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPermissionsByUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPermissionsByUserId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
