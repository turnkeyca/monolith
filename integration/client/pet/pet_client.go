// Code generated by go-swagger; DO NOT EDIT.

package pet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pet API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pet API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePet(params *CreatePetParams, opts ...ClientOption) (*CreatePetNoContent, error)

	DeletePet(params *DeletePetParams, opts ...ClientOption) (*DeletePetNoContent, error)

	GetPet(params *GetPetParams, opts ...ClientOption) (*GetPetOK, error)

	GetPetsByUserID(params *GetPetsByUserIDParams, opts ...ClientOption) (*GetPetsByUserIDOK, error)

	UpdatePet(params *UpdatePetParams, opts ...ClientOption) (*UpdatePetNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreatePet create a new pet
*/
func (a *Client) CreatePet(params *CreatePetParams, opts ...ClientOption) (*CreatePetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPet",
		Method:             "POST",
		PathPattern:        "/v1/pet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePet delete a pet
*/
func (a *Client) DeletePet(params *DeletePetParams, opts ...ClientOption) (*DeletePetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePet",
		Method:             "DELETE",
		PathPattern:        "/v1/pet/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPet return a pet
*/
func (a *Client) GetPet(params *GetPetParams, opts ...ClientOption) (*GetPetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPet",
		Method:             "GET",
		PathPattern:        "/v1/pet/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPetsByUserID return all pets for a user
*/
func (a *Client) GetPetsByUserID(params *GetPetsByUserIDParams, opts ...ClientOption) (*GetPetsByUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPetsByUserIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPetsByUserId",
		Method:             "GET",
		PathPattern:        "/v1/pet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPetsByUserIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPetsByUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPetsByUserId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePet update a pet
*/
func (a *Client) UpdatePet(params *UpdatePetParams, opts ...ClientOption) (*UpdatePetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePet",
		Method:             "PUT",
		PathPattern:        "/v1/pet/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
