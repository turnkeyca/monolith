// Code generated by go-swagger; DO NOT EDIT.

package pet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/turnkeyca/monolith/integration/models"
)

// GetPetsByUserIDReader is a Reader for the GetPetsByUserID structure.
type GetPetsByUserIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPetsByUserIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPetsByUserIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetPetsByUserIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPetsByUserIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPetsByUserIDOK creates a GetPetsByUserIDOK with default headers values
func NewGetPetsByUserIDOK() *GetPetsByUserIDOK {
	return &GetPetsByUserIDOK{}
}

/* GetPetsByUserIDOK describes a response with status code 200, with default header values.

A list of pets
*/
type GetPetsByUserIDOK struct {
	Payload []*models.PetDto
}

func (o *GetPetsByUserIDOK) Error() string {
	return fmt.Sprintf("[GET /v1/pet][%d] getPetsByUserIdOK  %+v", 200, o.Payload)
}
func (o *GetPetsByUserIDOK) GetPayload() []*models.PetDto {
	return o.Payload
}

func (o *GetPetsByUserIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPetsByUserIDForbidden creates a GetPetsByUserIDForbidden with default headers values
func NewGetPetsByUserIDForbidden() *GetPetsByUserIDForbidden {
	return &GetPetsByUserIDForbidden{}
}

/* GetPetsByUserIDForbidden describes a response with status code 403, with default header values.

Generic error message returned as a string
*/
type GetPetsByUserIDForbidden struct {
	Payload models.GenericError
}

func (o *GetPetsByUserIDForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/pet][%d] getPetsByUserIdForbidden  %+v", 403, o.Payload)
}
func (o *GetPetsByUserIDForbidden) GetPayload() models.GenericError {
	return o.Payload
}

func (o *GetPetsByUserIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPetsByUserIDInternalServerError creates a GetPetsByUserIDInternalServerError with default headers values
func NewGetPetsByUserIDInternalServerError() *GetPetsByUserIDInternalServerError {
	return &GetPetsByUserIDInternalServerError{}
}

/* GetPetsByUserIDInternalServerError describes a response with status code 500, with default header values.

Generic error message returned as a string
*/
type GetPetsByUserIDInternalServerError struct {
	Payload models.GenericError
}

func (o *GetPetsByUserIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/pet][%d] getPetsByUserIdInternalServerError  %+v", 500, o.Payload)
}
func (o *GetPetsByUserIDInternalServerError) GetPayload() models.GenericError {
	return o.Payload
}

func (o *GetPetsByUserIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
