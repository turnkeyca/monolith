// Code generated by go-swagger; DO NOT EDIT.

package roommate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new roommate API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for roommate API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRoommate(params *CreateRoommateParams, opts ...ClientOption) (*CreateRoommateNoContent, error)

	DeleteRoommate(params *DeleteRoommateParams, opts ...ClientOption) (*DeleteRoommateNoContent, error)

	GetRoommate(params *GetRoommateParams, opts ...ClientOption) (*GetRoommateOK, error)

	GetRoommatesByUserID(params *GetRoommatesByUserIDParams, opts ...ClientOption) (*GetRoommatesByUserIDOK, error)

	UpdateRoommate(params *UpdateRoommateParams, opts ...ClientOption) (*UpdateRoommateNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRoommate create a new roommate
*/
func (a *Client) CreateRoommate(params *CreateRoommateParams, opts ...ClientOption) (*CreateRoommateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRoommateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRoommate",
		Method:             "POST",
		PathPattern:        "/v1/roommate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRoommateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRoommateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRoommate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRoommate delete a roommate
*/
func (a *Client) DeleteRoommate(params *DeleteRoommateParams, opts ...ClientOption) (*DeleteRoommateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoommateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRoommate",
		Method:             "DELETE",
		PathPattern:        "/v1/roommate/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRoommateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRoommateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRoommate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRoommate return a roommate
*/
func (a *Client) GetRoommate(params *GetRoommateParams, opts ...ClientOption) (*GetRoommateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoommateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRoommate",
		Method:             "GET",
		PathPattern:        "/v1/roommate/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRoommateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoommateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRoommate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRoommatesByUserID return all roommates for a user
*/
func (a *Client) GetRoommatesByUserID(params *GetRoommatesByUserIDParams, opts ...ClientOption) (*GetRoommatesByUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoommatesByUserIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRoommatesByUserId",
		Method:             "GET",
		PathPattern:        "/v1/roommate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRoommatesByUserIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoommatesByUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRoommatesByUserId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRoommate update a roommate
*/
func (a *Client) UpdateRoommate(params *UpdateRoommateParams, opts ...ClientOption) (*UpdateRoommateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRoommateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRoommate",
		Method:             "PUT",
		PathPattern:        "/v1/roommate/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRoommateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRoommateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRoommate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
